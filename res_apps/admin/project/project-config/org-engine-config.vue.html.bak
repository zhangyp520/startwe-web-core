
<template >
    <div>
        <el-button slot="footer" @click="addOption()">添加</el-button>
        <el-button slot="footer" @click="clearOptions()">清空</el-button>
        <el-button type="primary" @click="event2save()" style="text-align: center" icon="el-icon-save">保存全部</el-button>
        <el-form>

            <el-row class="item">
                <el-col :span="24">
                    <el-form-item label="从项目中选择组织机构模型">
                        <oui-include type="module" ref="projectId4RbacModel" url="res_common/oui/ui/ui_pc/components/singleselect.vue.html" :data="getData4Projects()">
                        </oui-include>
                    </el-form-item>
                </el-col>
            </el-row>
            <draggable v-model="options" draggable=".item" handle=".item-move" @end="onSortEnd"  ghost-class="ghost" >


            <el-row  v-for="(element,index) in options" :key="element.id" class="item">
                <el-col :span="2" class="item-move">
                    <span>{{index+1}}</span>
                    <el-button type="text" size="medium" icon="el-icon-rank" class="item-move" ></el-button>

                </el-col>
                <el-col :span="20">
                    <el-row>
                        <el-col :span="4">
                            <el-form-item label="参与者类型编码">
                                <el-input type="text" v-model="element.value"  @change="_controlOnUpdate(index,element)" />
                            </el-form-item>
                        </el-col>
                        <el-col :span="4">
                            <el-form-item label="参与者类型名称">
                                <el-input type="text" v-model="element.display" @change="_controlOnUpdate(index,element)" />
                            </el-form-item>
                        </el-col>
                        <el-col :span="4">
                            <el-form-item label="绑定表模型">
                                <oui-include type="module" :ref="findBindTableModelId(element)" url="res_common/oui/ui/ui_pc/components/singleselect.vue.html" :data="findData4tableModels(element)">
                                </oui-include>
                            </el-form-item>
                        </el-col>
                        <el-col :span="4">
                            <el-form-item label="绑定表模型的Id字段">
                                <oui-include type="module" :ref="findBindId4TableModelId(element)" url="res_common/oui/ui/ui_pc/components/singleselect.vue.html" :data="findData4BindId(element)">
                                </oui-include>
                            </el-form-item>
                        </el-col>
                        <el-col :span="4">
                            <el-form-item label="绑定表模型的名称字段">
                                <oui-include type="module" :ref="findBindName4TableModelId(element)" url="res_common/oui/ui/ui_pc/components/singleselect.vue.html" :data="findData4BindName(element)">
                                </oui-include>

                            </el-form-item>
                        </el-col>
                        <el-col :span="4">
                            <el-form-item label="可在根节点显示">
                                <div>
                                    <el-switch v-model="element.showAtRootArea" @change="_controlOnUpdate(index,element)" />
                                </div>
                            </el-form-item>
                        </el-col>


                    </el-row>
                    <el-row>
                        <el-col :span="4">
                            <el-form-item label="是否为叶子节点">
                                <div>
                                    <el-switch v-model="element.leafParticipant" @change="_controlOnUpdate(index,element)" />
                                </div>
                            </el-form-item>
                        </el-col>
                        <el-col v-if="!element.leafParticipant" :span="4">
                            <el-form-item label="子参与者类型编码列表">
                                <el-button type="text" size="medium" icon="el-icon-edit" class="item-edit" @click="setChildTypeCodes(element)" draggable="false"></el-button>
                                <el-input type="textarea" readOnly="readOnly" :value="findChildParticipantTypeCodes(element)"></el-input>
                            </el-form-item>
                        </el-col>
                        <el-col :span="4">
                            <el-form-item label="组合参与者类型">
                                <el-switch v-model="element.jointParticipantType" @change="_controlOnUpdate(index,element)" />
                            </el-form-item>
                        </el-col>
                        <el-col v-if="element.jointParticipantType" :span="4">
                            <el-form-item label="组合参与者类型编码列表">
                                <el-button type="text" size="medium" icon="el-icon-edit" class="item-edit" @click="setJointTypeCodeList(element)" draggable="false"></el-button>
                                <el-input type="textarea" readOnly="readOnly" :value="findJointTypeCodes(element)"></el-input>
                            </el-form-item>
                        </el-col>

                    </el-row>
                    <el-row v-if="(!element.leafParticipant)&&(element.juniorParticipantTypeIds&&element.juniorParticipantTypeIds.length)">
                        <el-col  :span="2">
                            关系绑定
                        </el-col>
                        <el-col :span="20">
                            <el-row>
                                <el-col :span="4" v-for="(child,childIndex) in findChildrenParticipantTypes(element)" :key="findKey4Child(element,child)" >
                                    <el-form-item  :label="findLabel4Child(element,child)">
                                        <oui-include type="module" :ref="findRef4Child(element,child)" url="res_common/oui/ui/ui_pc/components/singleselect.vue.html" :data="findData4Child(element,child)"></oui-include>
                                    </el-form-item>
                                </el-col>
                            </el-row>
                        </el-col>

                    </el-row>
                </el-col>
                <el-col :span="2">
                    <el-button-group>
                        <el-button type="text" size="medium" icon="el-icon-plus button" class="item-add" @click="addOption(element.id)" draggable="false"></el-button>
                        <el-button type="text" size="medium" icon="el-icon-delete button" class="item-delete" @click="removeOption(element.id)" draggable="false"></el-button>
                    </el-button-group>
                </el-col>
            </el-row>
        </draggable>
            <el-row>
                <el-col :span="24" style="text-align:center">
                    <el-button type="primary" @click="event2save()" style="text-align: center" icon="el-icon-save">保存全部</el-button>
                </el-col>
            </el-row>
        </el-form>

    </div>
</template>

<script>
    exports = {
        templateType:'vue',
        data: function () {
            return {
                getData4Projects:this.getData4Projects,
                data4projects:{},
                projectId:'',
                projectId4RbacModel:'',
                cache4vue:{},
                options:[]
            }
        },
        mounted:function(){
            var me = this;
            //参与者类型配置
            oui.require([oui.getContextPath()+'res_common/third/sortable/sortable1.8.js', oui.getContextPath()+'res_common/third/sortable/vuedraggable2.20.js'],function(){
                me.init();
            });
        },
        methods:{
            init:function(){
                var me = this;
                var param = this.$router.query||{};
                var projectId = param.projectId || '';

                var dialog =  oui.getTop().com.oursui.models.project.web.ProjectController4Design.dialog4projectConfig;

                var projectsJson = dialog.attr('projectsJson');
                var queryPagesByProjectIdUrl = dialog.attr('queryPagesByProjectIdUrl');
                this.queryPagesByProjectIdUrl = queryPagesByProjectIdUrl;
                var projects = oui.parseJson(projectsJson);
                var configJson = dialog.attr('rbacModelConfigJson');

                var config = oui.parseJson(configJson);
                var participantTypeList = config.participantTypeList ||[];
                var participantTypeMap = config.participantTypeMap||{};
                var projectId4RbacModel = config.projectId4RbacModel||projectId;
                var projectId = config.projectId || projectId;
                this.projects = projects;


                this.$refs.projectId4RbacModel.comp.data = projects;
                this.$refs.projectId4RbacModel.comp.value = config.projectId4RbacModel;

                this.projectId4RbacModel = projectId4RbacModel;
                var oneProject4rbac = oui.findOneFromArrayBy(this.projects,function(item){
                    if(item.value == projectId4RbacModel){
                        return true;
                    }
                });
                if(oneProject4rbac){
                    this.queryPageFieldsByFormIdUrl = oneProject4rbac.queryPageFieldsByFormIdUrl;
                }
                this.projectId = projectId;
                var tableModelConfigMap = config.tableModelConfigMap||{};
                var options = [];


                oui.eachArray(participantTypeList,function(typeCode){
                    var item = participantTypeMap[typeCode];
                    if(item){
                        var tableModelItem = tableModelConfigMap[typeCode];
                        if(tableModelItem){
                            for(var k in tableModelItem){
                                item[k] = tableModelItem[k];
                            }
                        }
                        options.push(item);
                    }
                });
                this.options = options;
                var allCodes = [];
                oui.eachArray(me.options,function(item){
                    if(!item.prefix){
                        item.prefix = me.randomPrefix();
                    }
                    if(!item.code){
                        item.code = item.prefix+"_"+oui.getUUIDLong();
                    }

                    if(!item.id){
                        item.id = oui.getUUIDLong();
                    }
                    if(!item.value){
                        item.value = item.code;
                    }
                    if(!item.display){
                        item.display = item.displayName;
                    }

                    allCodes.push(item.value);

                    item.juniorParticipantTypeCodes = item.juniorParticipantTypeCodes||[];
                    item.jointTypeCodeList = item.jointTypeCodeList||[];
                });

                oui.eachArray(me.options,function(item){
                    var juniorParticipantTypeCodes = item.juniorParticipantTypeCodes||[];
                    var jointTypeCodeList = item.jointTypeCodeList||[];
                    var juniorParticipantTypeIds = [];
                    var jointTypeIdList = [];
                    if(juniorParticipantTypeCodes.length){
                        var tempArr = [];
                        oui.eachArray(juniorParticipantTypeCodes,function(temp){
                            if(allCodes.indexOf(temp)>-1){
                                tempArr.push(temp);
                                var idx = allCodes.indexOf(temp);
                                juniorParticipantTypeIds.push(me.options[idx].id);
                            }
                        });
                        item.juniorParticipantTypeCodes = oui.parseJson(oui.parseString(tempArr));
                    }
                    if(jointTypeCodeList.length){
                        var tempArr =[];
                        oui.eachArray(jointTypeCodeList,function(temp){
                            if(allCodes.indexOf(temp)>-1){
                                tempArr.push(temp);
                                var idx = allCodes.indexOf(temp);
                                jointTypeIdList.push(me.options[idx].id);
                            }
                        });
                        item.jointTypeCodeList = oui.parseJson(oui.parseString(tempArr));
                    }
                    item.jointTypeIdList = jointTypeIdList;
                    item.juniorParticipantTypeIds = juniorParticipantTypeIds;
                });
                this.$set(this,'options',this.options);
                console.log(this.options);
                console.log(oui.parseString(this.options));
                this.refresh();
            },
            getCache:function(){
                var cache4vue = this.cache4vue;
                if(!cache4vue){
                    cache4vue = {};
                    this.cache4vue= cache4vue;
                }
                return this.cache4vue;
            },
            /*
             *<el-form-item v-for="(child,childIndex) in findChildrenParticipantTypes(element)" :key="findKey4Child(element,child)" :label="findLabel4Child(element,child)">
             <oui-include type="module" :ref="findRef4Child(element,child)" url="res_common/oui/ui/ui_pc/components/singleselect.vue.html" :data="findData4Child(element,child)"></oui-include>
             </el-form-item>
             */
            findChildrenParticipantTypes:function(item){ // typeCode,parentIdKey
                var childIds = item.juniorParticipantTypeIds||[];
                var arr= [];
                oui.eachArray(this.options,function(temp){
                    if(childIds.indexOf(temp.id)>-1){
                        arr.push(temp);
                    }
                });
                return arr;
            },
            /*
             * 父子关系的ref
             */
            findKey4Child:function(item,child){
                return 'parentIdKey_'+item.id+'_'+child.id;
            },
            findLabel4Child:function(item,child){
                return child.display+'-关联字段';
            },
            findRef4Child:function(item,child){
                return 'parentIdKey_ref_'+item.id+'_'+child.id;
            },
            findData4Child:function(item,child){
                debugger;
                var me = this;
                var cache4vue =  this.getCache();
                var bindKey = 'parentIdKey_'+item.id+'_'+child.id;
                var childIds = item.juniorParticipantTypeIds||[];
                if(!item.childModelMap){
                    item.childModelMap = {};
                    me.$set(item,'childModelMap',item.childModelMap);
                }
                for(var k in item.childModelMap){
                    if(childIds.indexOf(k)<0){
                        item.childModelMap[k] = null;
                        delete item.childModelMap[k];
                    }
                }
                oui.eachArray(childIds,function(cId){
                    if(!item.childModelMap[cId]){
                        item.childModelMap[cId] = {
                            parentId:item.id,
                            id:cId,
                            parentIdKey:'',
                            parentIdDisplay:''
                        };
                        me.$set(item.childModelMap,cId,item.childModelMap[cId]);
                    }
                });
                if(!cache4vue[bindKey]){
                    var data4item = [];
                    if(item.childModelMap[child.id].parentIdKey){
                        data4item.push({value:item.childModelMap[child.id].parentIdKey,display:item.childModelMap[child.id].parentIdDisplay});
                    }
                    cache4vue[bindKey] = {
                        notClone4Component:true,
                        id:bindKey,
                        name:bindKey,
                        bindProp:bindKey,
                        value:item.childModelMap[child.id].parentIdKey,
                        data:data4item,
                        queryParams:{
                            formId:child.tableModelId
                        },
                        url:me.queryPageFieldsByFormIdUrl,
                        dataKey:'fields',
                        queryKey:'name',
                        valueKey:'value',
                        displayKey:'name',
                        rowId:item.id,
                        childId:child.id,
                        onUpdate:function(key,v,ov,data4options){
                            var rowId = this.rowId;
                            var childId = this.childId;
                            var one = oui.findOneFromArrayBy(me.options,function(temp){
                                if(temp.id == rowId){
                                    return true;
                                }
                            });
                            if(one){
                                one.childModelMap[childId].parentIdKey = v; //值改变处理
                                if(!v){
                                    one.childModelMap[childId].parentIdDisplay='';
                                }else{
                                    one.childModelMap[childId].parentIdDisplay = data4options.display;
                                }
                            }
                        }
                    };
                    me.$set(cache4vue,bindKey,cache4vue[bindKey]);
                }
                return cache4vue[bindKey];
            },
            findData4BindName:function(item){
                var me = this;
                var cache4vue =  this.getCache();
                var bindKey = 'tableModelId_name_'+item.id;
                if(!cache4vue[bindKey]){
                    var data4item = [];
                    if(item.nameKey){
                        data4item.push({value:item.nameKey,display:item.nameKeyDisplay});
                    }
                    cache4vue[bindKey] = {
                        notClone4Component:true,
                        id:bindKey,
                        name:bindKey,
                        bindProp:bindKey,
                        value:item.nameKey,
                        data:data4item,
                        queryParams:{
                            formId:item.tableModelId
                        },
                        url:me.queryPageFieldsByFormIdUrl,
                        dataKey:'fields',
                        queryKey:'name',
                        valueKey:'value',
                        displayKey:'name',
                        rowId:item.id,
                        onUpdate:function(key,v,ov,data4options){
                            var rowId = this.rowId;
                            var one = oui.findOneFromArrayBy(me.options,function(temp){
                                if(temp.id == rowId){
                                    return true;
                                }
                            });
                            if(one){
                                one.nameKey = v; //值改变处理
                                if(!v){
                                    one.nameKeyDisplay='';
                                }else{
                                    one.nameKeyDisplay = data4options.display;
                                }
                            }
                        }
                    };
                    me.$set(cache4vue,bindKey,cache4vue[bindKey]);
                }
                return cache4vue[bindKey];
            },

            //根据表单Id 查询 字段列表绑定的数据
            findData4BindId:function(item){
                var me = this;
                var cache4vue =  this.getCache();
                var bindKey = 'tableModelId_id_'+item.id;
                if(!cache4vue[bindKey]){
                    var data4item = [];
                    if(item.idKey){
                        data4item.push({value:item.idKey,display:item.idKeyDisplay});
                    }
                    cache4vue[bindKey] = {
                        notClone4Component:true,
                        id:'tableModelId_id_'+item.id,
                        name:'tableModelId_id_'+item.id,
                        bindProp:'tableModelId_id_'+item.id,
                        value:item.idKey,
                        data:data4item,
                        queryParams:{
                            formId:item.tableModelId
                        },
                        url:me.queryPageFieldsByFormIdUrl,
                        dataKey:'fields',
                        queryKey:'name',
                        valueKey:'value',
                        displayKey:'name',
                        rowId:item.id,
                        onUpdate:function(key,v,ov,data4options){
                            var rowId = this.rowId;
                            var one = oui.findOneFromArrayBy(me.options,function(temp){
                                if(temp.id == rowId){
                                    return true;
                                }
                            });
                            if(one){
                                one.idKey = v; //值改变处理
                                if(!v){
                                    one.idKeyDisplay = '';
                                }else{
                                    one.idKeyDisplay = data4options.display;
                                }
                            }
                        }
                    };
                    me.$set(cache4vue,bindKey,cache4vue[bindKey]);

                }
                return cache4vue[bindKey];
            },
            findData4tableModels:function(item){
                var me = this;
                var cache4vue =  this.getCache();
                var bindKey = 'tableModelId_'+item.id;
                if(!cache4vue[bindKey]){
                    var data4item = [];
                    if(item.tableModelId){
                        data4item.push({value:item.tableModelId,display:item.tableModelIdDisplay});
                    }
                    cache4vue[bindKey]  = {
                        notClone4Component:true,
                        id:'tableModelId_'+item.id,
                        name:'tableModelId_'+item.id,
                        bindProp:'tableModelId_'+item.id,
                        value:item.tableModelId,
                        data:data4item,
                        queryParams:{
                            projectId:me.projectId4RbacModel
                        },
                        url:me.queryPagesByProjectIdUrl,
                        dataKey:'pages',
                        queryKey:'name',
                        valueKey:'id',
                        displayKey:'name',
                        rowId:item.id,
                        onUpdate:function(key,v,ov,data4options){
                            var rowId = this.rowId;
                            var one = oui.findOneFromArrayBy(me.options,function(temp){
                                if(temp.id == rowId){
                                    return true;
                                }
                            });
                            if(one){
                                one.tableModelId = v; //值改变处理
                                one.idKey='';
                                one.parentIdKey='';
                                one.nameKey='';
                                //根据表模型Id 查询 字段
                                if(!v){
                                    one.tableModelIdDisplay='';
                                    //idKey
                                    var refKey4bindId =  'tableModelId_id_'+one.id;
                                    if(me.$refs[refKey4bindId]){
                                        me.$refs[refKey4bindId][0].comp.value = '';
                                        me.$refs[refKey4bindId][0].comp.data = [];
                                    }

                                    //parentIdKey
                                    var refKey4bindParentId =  'tableModelId_parentId_'+one.id;
                                    if(me.$refs[refKey4bindParentId]){
                                        me.$refs[refKey4bindParentId][0].comp.value = '';
                                        me.$refs[refKey4bindParentId][0].comp.data = [];
                                    }

                                    //nameKey
                                    var refKey4bindNameId =  'tableModelId_name_'+one.id;
                                    if(me.$refs[refKey4bindNameId]){
                                        me.$refs[refKey4bindNameId][0].comp.value = '';
                                        me.$refs[refKey4bindNameId][0].comp.data = [];
                                    }
                                }else{
                                    one.tableModelIdDisplay=data4options.display;
                                    // getData
                                    //TODO 获取字段数据
                                    oui.getData(me.queryPageFieldsByFormIdUrl,{formId:one.tableModelId},function(res){
                                        var refKey4bindId =  'tableModelId_id_'+one.id;
                                        if(me.$refs[refKey4bindId]){
                                            me.$refs[refKey4bindId][0].comp.queryParams.formId = one.tableModelId;
                                            me.$refs[refKey4bindId][0].comp.value = '';
                                            me.$refs[refKey4bindId][0].comp.data = oui.parseJson(oui.parseString(res.fields))||[];
                                        }

                                        //parentIdKey
                                        var refKey4bindParentId =  'tableModelId_parentId_'+one.id;
                                        if(me.$refs[refKey4bindParentId]){

                                            me.$refs[refKey4bindParentId][0].comp.queryParams.formId = one.tableModelId;
                                            me.$refs[refKey4bindParentId][0].comp.value = '';
                                            me.$refs[refKey4bindParentId][0].comp.data = oui.parseJson(oui.parseString(res.fields))||[];
                                        }

                                        //nameKey
                                        var refKey4bindNameId =  'tableModelId_name_'+one.id;
                                        if(me.$refs[refKey4bindNameId]){

                                            me.$refs[refKey4bindNameId][0].comp.queryParams.formId = one.tableModelId;
                                            me.$refs[refKey4bindNameId][0].comp.value = '';
                                            me.$refs[refKey4bindNameId][0].comp.data =oui.parseJson(oui.parseString(res.fields))||[];
                                        }
                                    });
                                }


                            }
                        }
                    };
                    me.$set(cache4vue,bindKey,cache4vue[bindKey]);

                }
                return cache4vue[bindKey];
            },

            getData4Projects:function(){
                var me = this;
                var cache4vue = this.getCache();
                var bindKey = 'projectId4RbacModel';
                if(!cache4vue[bindKey]){
                    cache4vue[bindKey] = {
                        notClone4Component:true,
                        clearable:false,
                        id:'projectId4RbacModel',
                        name:'projectId4RbacModel',
                        bindProp:'projectId4RbacModel',
                        value:this.projectId4RbacModel,
                        data:this.projects||[],
                        onUpdate:function(key,v){
                            me.onUpdate(key,v);
                        }
                    };
                    me.$set(cache4vue,bindKey,cache4vue[bindKey]);
                }
                return cache4vue[bindKey];
            },

//            getData4Projects:function(){
//                return this.data4projects;
//            },

            onUpdate:function(key,v){
                var me = this;
                if(key =='projectId4RbacModel'){
                    me.projectId4RbacModel = v;
                    if(v){
                        var one = oui.findOneFromArrayBy(me.projects,function(temp){
                            if(temp.value == v){
                                return true;
                            }
                        });
                        if(one){
                            me.queryPageFieldsByFormIdUrl = one.queryPageFieldsByFormIdUrl;
                        }

                        oui.getData(me.queryPagesByProjectIdUrl,{
                            projectId:v
                        },function(res){
                            var pages =res.pages||[];
                            //组织模型所属项目变更后，更新控件数据项
                            oui.eachArray(me.options||[],function(item){
                                var data4tableModels = me.findData4tableModels(item);


                                data4tableModels.queryParams= {
                                    projectId:v
                                };
                                var refKey = 'tableModelId_'+item.id;
                                if(me.$refs[refKey]){
                                    me.$refs[refKey][0].comp.value = '';
                                    me.$refs[refKey][0].comp.data = oui.parseJson(oui.parseString(pages));
                                    me.$refs[refKey][0].comp.queryParams.projectId = v;
                                }
                                //idKey
                                var refKey4bindId =  'tableModelId_id_'+item.id;
                                if(me.$refs[refKey4bindId]){
                                    me.$refs[refKey4bindId][0].comp.value = '';
                                    me.$refs[refKey4bindId][0].comp.data = [];
                                }

                                //parentIdKey
                                var refKey4bindParentId =  'tableModelId_parentId_'+item.id;
                                if(me.$refs[refKey4bindParentId]){
                                    me.$refs[refKey4bindParentId][0].comp.value = '';
                                    me.$refs[refKey4bindParentId][0].comp.data = [];
                                }

                                //nameKey
                                var refKey4bindNameId =  'tableModelId_name_'+item.id;
                                if(me.$refs[refKey4bindNameId]){
                                    me.$refs[refKey4bindNameId][0].comp.value = '';
                                    me.$refs[refKey4bindNameId][0].comp.data = [];
                                }

                            });
                        });
                    }else{
                        me.queryPageFieldsByFormIdUrl='';
                    }


                }
                this.$set(this,key,v);
            },
            findBindTableModelId:function(item){
                return 'tableModelId_'+item.id;
            },
            findBindId4TableModelId:function(item){
                return 'tableModelId_id_'+item.id;
            },
            findBindName4TableModelId:function(item){
                return 'tableModelId_name_'+item.id;
            },
            findChildParticipantTypeCodes:function(item){
                var ids = item.juniorParticipantTypeIds ||[];
                var newValue = [];
                if(ids.length){
                    oui.eachArray(this.options||[],function(temp){
                        if(temp.code && (ids.indexOf(temp.id)>-1)){
                            newValue.push(temp.code);
                        }
                    });
                }
                return newValue.join(',')
            },
            findJointTypeCodes:function(item){
                var ids = item.jointTypeIdList ||[];
                var newValue = [];
                if(ids.length){
                    oui.eachArray(this.options||[],function(temp){
                        if(temp.code && (ids.indexOf(temp.id)>-1)){
                            newValue.push(temp.code);
                        }
                    });
                }
                return newValue.join(',')
            },
            setJointTypeCodeList:function(item){
                var me = this;

                var value = item.jointTypeCodeList ||[];
                var data =  oui.parseJson(oui.parseString(this.options));

                oui.getTop().oui.showOptionsDialog({
                    isShowSearch:true,
                    value:value.join(','),
                    data:data,
                    confirm:function(value,selects,obj){
                        if(value){
                            item.jointTypeCodeList = value.split(',');
                        }else{
                            item.jointTypeCodeList = [];
                        }
                        var ids =[];
                        oui.eachArray(selects,function(temp){
                            ids.push(temp.id);
                        });
                        item.jointTypeIdList = ids;
                        me.$set(me.options,me.options.indexOf(item),item);
                    }
                });
            },
            //设置子参与者类型编码
            setChildTypeCodes:function(item){
                var me = this;

                debugger;
                var value = item.juniorParticipantTypeCodes ||[];
                var data =  oui.parseJson(oui.parseString(this.options));

                oui.getTop().oui.showOptionsDialog({
                    isShowSearch:true,
                    value:value.join(','),
                    data:data,
                    confirm:function(value,selects,obj){
                        if(value){
                            item.juniorParticipantTypeCodes = value.split(',');
                        }else{
                            item.juniorParticipantTypeCodes = [];
                        }
                        var ids =[];
                        oui.eachArray(selects,function(temp){
                            ids.push(temp.id);
                        });
                        item.juniorParticipantTypeIds = ids;
                        me.$set(me.options,me.options.indexOf(item),item);
                    }
                });
            },
            checkOne:function(item){
                var me = this;
                var isValidate = true;
                if(!item.code){
                    me.$alert('参与者类型编码不能为空');
                    isValidate = false;
                    return false;
                }
                if(!item.display){
                    me.$alert('参与者类型名称不能为空');

                    isValidate = false;
                    return false;
                }
                if(!item.tableModelId){
                    me.$alert('绑定表模型不能为空');

                    isValidate =false;
                    return false;
                }
                if(!item.idKey){
                    me.$alert('绑定表模型Id字段不能为空');

                    isValidate = false;
                    return false;
                }

                if(!item.nameKey){
                    me.$alert('绑定表模型的名称字段不能为空');
                    isValidate = false;
                    return false;
                }
                return isValidate;
            },
            checkData:function(){
                var me = this;
                var isValidate = true;
                oui.eachArray(this.options||[],function(item){
                    isValidate = me.checkOne(item);
                    if(!isValidate){
                        return false;
                    }
                });
                return isValidate;
            },
            event2save:function(){
                var me = this;
                //保存所有
                /*
                 projectId:me.data.project.id,
                 projectId4RbacModel:me.data.project.id,
                 participantTypeList:[],
                 participantTypeMap:{},
                 tableModelConfigMap:{}
                 */
                var options = this.options||[];
                var projectConfig = {
                    projectId:this.projectId,
                    projectId4RbacModel:this.projectId4RbacModel,
                    participantTypeList:[],
                    participantTypeMap:{},
                    tableModelConfigMap:{}
                };
                var isValidate= true;
                oui.eachArray(options,function(item){
                    if(projectConfig.participantTypeList.indexOf(item.code)<0){
                        projectConfig.participantTypeList.push(item.code);
                    }

                    projectConfig.participantTypeMap[item.code] = {
                        id:item.id,
                        prefix:item.code.substring(0,1),
                        code:item.code,
                        displayName:item.display,
                        showAtRootArea:item.showAtRootArea,
                        description:item.description||'',
                        priority:item.priority,
                        leafParticipant:item.leafParticipant,
                        juniorParticipantTypeCodes:item.juniorParticipantTypeCodes||[],
                        jointParticipantType:item.jointParticipantType,
                        jointTypeCodeList:item.jointTypeCodeList||[]
                    };
                    projectConfig.tableModelConfigMap[item.code] = {
                        participantType:item.code,
                        tableModelId:item.tableModelId,
                        tableModelIdDisplay:item.tableModelIdDisplay,
                        idKey:item.idKey,
                        idKeyDisplay:item.idKeyDisplay,
                        parentIdKey:item.parentIdKey,
                        parentIdKeyDisplay:item.parentIdKeyDisplay,
                        nameKey:item.nameKey,
                        nameKeyDisplay:item.nameKeyDisplay
                    };
                    isValidate = me.checkOne(item);
                    if(!isValidate){
                        return false;
                    }
                });
                if(!isValidate){

                    return;
                }
                var dialog =  oui.getTop().com.oursui.models.project.web.ProjectController4Design.dialog4projectConfig;

                var json4save = dialog.attr('json4save');
                json4save = oui.parseJson(json4save);
                json4save.treeMap = oui.parseJson(json4save.treeMap);
                json4save.treeMap.rbacModelConfig = projectConfig;
                json4save.treeMap  = oui.parseString(json4save.treeMap);
                dialog.attr('json4save',oui.parseString(json4save));
                var url = dialog.attr('saveDesignUrl');
                dialog.attr('rbacModelConfigJson',oui.parseString(projectConfig));
                oui.postData(url,json4save,function(res){
                    if(res.success){
                        me.$message({
                            message:'保存成功',
                            type:'success'
                        });
                        //保存成果后刷新父页面
                        var topMe = oui.getTop().com.oursui.models.project.web.ProjectController4Design;
                        topMe.load({id: topMe.urlParams.id},function(res){
                            topMe.refreshByRoot();
                        });
                    }else{
                        oui.getTop().oui.alert(res.msg);
                    }
                },function(err){
                    oui.getTop().oui.alert(err);
                },'保存中...');
            },
            onMove:function(e){
                console.log(e);
            },
            onSortEnd:function(){

            },
            clearOptions:function(){
                this.options.length=0;
                this.options = [];
            },
            addOptions:function(){

            },
            randomPrefix:function(){
                var str = "0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z";
                var arr = str.split(',');
                var prefixAll = [];
                oui.eachArray(this.options,function(item){
                    if(item.prefix&&prefixAll.indexOf(item.prefix)<0){
                        prefixAll.push(item.prefix);
                    }
                });
                var flag = true;
                var randomPrefixId = '';
                do{
                    randomPrefixId = oui.uuid(1,arr.length);
                    randomPrefixId = randomPrefixId.toLowerCase();
                    if(randomPrefixId && (prefixAll.indexOf(randomPrefixId)<0)){
                        flag= false;
                    }
                }while(flag);
                return randomPrefixId;
            },
            addOption:function(id){
                var me = this;
                var prefix = me.randomPrefix();
                var newId = oui.getUUIDLong();
                var code  = prefix+"_"+(oui.getUUIDLong().substring(0,4));
                var displayName = "参与者类型-"+(me.options.length+1);
                if(me.options.length+1>20){
                    oui.getTop().oui.alert('参与者类型不能超过20个');
                    return;
                }
                var flag = me.checkData();
                if(!flag){
                    return false;
                }
                if(id){
                    var item = oui.findOneFromArrayBy(this.options,function(item){
                        if(item.id ==id){
                            return true;
                        }
                    });
                    var idx = this.options.indexOf(item);

                    this.options.splice(idx+1,0,{
                        id:newId,
                        code:code,
                        prefix:prefix,
                        value:code,
                        display:displayName,
                        displayName:displayName,
                        showAtRootArea:true,
                        priority:10,
                        leafParticipant:false,
                        juniorParticipantTypeCodes:[],
                        jointParticipantType:false,
                        jointTypeCodeList:[]
                    });//删除指定元素
                }else{
                    this.options.push({
                        id:newId,
                        prefix:prefix,
                        code:code,
                        value:code,
                        display:displayName,
                        displayName:displayName,
                        showAtRootArea:true,
                        priority:10,
                        leafParticipant:false,
                        juniorParticipantTypeCodes:[],
                        jointParticipantType:false,
                        jointTypeCodeList:[]
                    });
                }

            },
            removeOption:function(id){
                var item = oui.findOneFromArrayBy(this.options,function(item){
                    if(item.id ==id){
                        return true;
                    }
                });
                var idx = this.options.indexOf(item);
                this.options.splice(idx,1);//删除指定元素
            },
            _controlOnUpdate:function(index,item){
                var me  = this;
                item.displayName = item.display+'';
                item.code = item.value+'';
                item.prefix = item.code.substring(0,1);
                me.$set(me.options,index,item);
            }
        }
    }
</script>

<style>
    .button{
        padding: 10px;
    }
    .ghost{
        border: 1px dashed indianred;
    }
    .item{

        padding-top:5px ;
        padding-bottom:5px ;
        border: 1px dashed #ddd ;
        margin: 5px ;
        /*height: 30px;*/
        /*font-size: 14px;*/
    }
    .item:hover{
        background-color: beige;
    }
    .item-move{
        cursor: move;
    }
    .item-delete{
        padding-left: 5px;
        color: red;
    }
    .item-add{
        padding-left: 5px;
        color: blue;
    }
</style>